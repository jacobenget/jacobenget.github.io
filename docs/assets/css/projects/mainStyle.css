/**************** From projects homepage ****************/

.projects {
	display: flex;
	flex-direction: column;
	gap: 0.3rem;
}

.iconicHeader {
	display: flex;
	flex-direction: row;
	align-items: center;
}

.iconicHeader .title {
	font-weight: bold;
	font-size: larger;
	border-right: solid;
	border-right-width: 1px;
	padding-right: 0.8em;
	margin-right: 0.8em;
}

.iconicHeader .description {
	font-weight: normal;
}

.projectRow.iconicHeader {
	display: flex;
}
	
.projectRow.iconicHeader .title {
	font-size: 100%;	/* Remove bold-ness usually applied to the title */
}
	
.projectRow.iconicHeader .thumbnail {
	order: -1;	/* Move the thumbnail to the beginning of the flex grid */
	width: 30%;
	padding-right: 2em;
}
		
.projectRow.iconicHeader img.thumbnail {
	aspect-ratio: 3;
}


/**************** From page showing a single project ****************/

/* Inherited behavior is that anchor tags do NOT have underlines
 but we'd like to change that here so all anchors in the contents
 of a project have underlines */
#projectIncludeContents a {
	text-decoration: underline;
}

#projectIncludeContents {
	padding-bottom: 2em;
}

#projectDetailWrapper .navigationBar {
	font-size: smaller;
	display: flex;
	flex-direction: row;
}

#projectDetailWrapper .navigationBar .previousLink {
	flex-grow: 1;
	flex-basis: 0;	/* So the actual width this eventually takes up isn't dependent upon its natural/auto width */
}

@media (width <= 900px) {
	/* On not not-so-wide displays the main navigation menu is just at the top of the page,
	 so a user at the top of a project page always has a button close by to press to
	 get back to the projects home, so this custom button to do just that at the top
	 of each project page can just be hidden */
	#projectDetailWrapper #projectTopBar .projectsHomeLink {
		display: none;
	}
}

#projectDetailWrapper .navigationBar .nextLink {
	flex-grow: 1;
	flex-basis: 0;	/* So the actual width this eventually takes up isn't dependent upon its natural/auto width */
	text-align: right;
}

#projectDetailWrapper #projectTopBar {
	margin-bottom: 2rem;
}

#projectDetailWrapper #projectBottomBar {
	margin-top: 1rem;
}


/*
	NOTE: using :where here in order to NOT introduce a more specific selector that would indicentally override 
	the attempt below to restyle a .projectRow.iconicHeader based on the width of its container
	*/
:where(#projectDetailWrapper) .projectRow.iconicHeader .title {
	font-size: 130%;
}
:where(#projectDetailWrapper) .projectRow.iconicHeader .thumbnail {
	width: 25%;
	padding-right: 1.5em;
}


/*
	When the container listing the projects or a single project isn't particularly wide,
	change the row for each project so the thumbnail fully expands to fill the available width,
	the title appears above the thumbnail, and the description appears below the thumbnail
	*/
@container content (width < 49em) {
	.projects {
		gap: 1.6rem;
	}

	.projectRow.iconicHeader {
		flex-direction: column;
		align-items: normal;
	}
	
	.projectRow.iconicHeader .title {
		font-size: 130%;
		border-right: none;
	}
	
	.projectRow.iconicHeader .thumbnail {
		order: 0;	/* Move the thumbnail back to its initial spot in the order */
		width: 100%;
	}
	
	.projectRow.iconicHeader .description {
		order: 1;	/* Move the project decription to the end of the flex grid */
		text-align: right;
	}
}



/****************************************************************/
/**************** Classes used by a specific project ***************/
/****************************************************************/


/************* Doom Wad Reader Specific ****************/

#dropWadHere {
	border: 1px dashed;
	padding: 0.25em;	/* Put a small amount of space between the border and the content of this item, which will be a different color */
}

/* The color of Drop Area changes through user interaction */
#dropWadHere .inner {
	background-color: #e8e8ef;
}
#dropWadHere.dropIsValid .inner {
	background-color: #cacadb;
}
#dropWadHere.dropIsBeingProcessed .inner {
	background-color: #cecece;
}

#dropWadHere * {
	/* this is here to avoid 'dragLeave' from firing when a child element is entered, so highlighting the drop area only when the user is in the middle of a valid drop is as easy
	as listening to 'dragEnter' and 'dragLeave'.  This approach was taken from here: https://medium.com/developer-rants/preventing-drag-events-from-triggering-over-child-elements-5700f385a95e */
	pointer-events: none;
}

/*
	When it comes to formatting the Drop Area we want these things:
		1. Drop Area expands horizontally to fill the entire width of its parent container
		2. Arrow and text in Drop Area are
			- side-by-side horizontally, arrow on the left
			- vertically centered relative to each other
			- Have some visual padding vertically and horizontally, and this padding is symmetric in each direction
*/

#dropWadHere .contents {
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: center;
	padding: 1.5em;
	gap: 1em;
}

#dropWadHere img.icon {
  height: 5em;
}

/*
	When it comes to formatting the results of the WAD parsing we want these things:
		1. Identifier of the WAD should be larger text
		2. Name of the category for the images should have my signature "name | description" formatting
		3. Images should
			- flow horizontally across all available width
			- be displayed at their native size (I think?)
			- Each be symmetrically surrounded by a comfortable amount of white space
*/

.sectionContainer img {
	display: inline;
	margin: 0.5em;
}


/************* 3dmaze Specific ****************/

/* Center the main image in this project */
.main3dMazeImage {
	text-align: center;
}
.main3dMazeImage img {
	display: inline;
}

/*
	We want a row of images that equally spaces out 4 square images horizontally, with a bit of padding between them
*/
.imageRow {
	display: flex;
	gap: 2%;
	padding-inline: 4%;
	padding-block-end: 2%;
	justify-content: center;
}

.imageRow img {
	aspect-ratio: 1;
}

/* Put a bit of extra visual padding below a row of images */
.imageRow {
	margin-bottom: 2em;
}


/************ Samurai Specific *****************/

#samuraiControls {
	padding-top: 1em;
	text-align: center;
}

#samuraiFlashContainer {
	border: 1px solid;
	/* Not sure why, but applying this style removes some extra gap that appears between the bottom of the Flash content and the drawn border */
	overflow: auto;
}

/*
	The goal here was to get the Flash content to appear on the page in this way:
		1. With its native aspect ratio (which we assume to be the aspect-ratio that it'll look the best at)
		2. Having a width that is never more than a certain percentage (e.g. 80%) of the width of the surrounding content
			- This is so the Flash content will attractively scale down on smaller viewports
		3. Centered horizontally

	Achieving this wasn't trivial because not all styles put on the 'samuraiFlash' class
	(which is added dynamically to the generated <ruffle-player> tag, via the ruffle library)
	seem to be make it through to the contained <canvas> that reprepresents the Flash content.

	But the approach of (1) explicitly setting the width/height of the parent container #samuraiFlashContainer
	to be exactly the width/height I want and (2) having .samuraiFlash be at most the size of its parent container
	seems to work well.

	One caveat is that ruffle doesn't seem to allow the Flash content to scale UP past its native width/height,
	so we limit the max size of the surrounding container such that the Flash content is always nicely hugged by this container. 
*/

#samuraiFlashContainer {
	/* Flash app on this page natively wants to be 550px by 400px */
	width: min(80%, 550px);
	aspect-ratio: 550 / 400;
	margin-inline: auto;	/* center horizontally */
}

.samuraiFlash {
	max-width: 100%;
	max-height: 100%;
}

/************* Cycle 3467 **********************/

#cycle3467Container {
	width: 80%;
	margin-inline: auto;	/* center horizontally */
}

/* Have any text associated directly with the video (e.g. a video description) look visually different */
#cycle3467Container p {
	font-size: smaller;
	text-align: center;
	font-style: italic;
}

/*********** Extras Specific *******************/

/*
	The goal here was to get the Flash content to appear on the page in this way:
		1. With its native aspect ratio (which we assume to be the aspect-ratio that it'll look the best at)
		2. Having a width that is never more than a certain percentage (e.g. 80%) of the width of the surrounding content
			- This is so the Flash content will attractively scale down on smaller viewports
		3. Centered horizontally

	Achieving this wasn't trivial because not all styles put on the 'syntheticSnowFlash' class
	(which is added dynamically to the generated <ruffle-player> tag, via the ruffle library)
	seem to be make it through to the contained <canvas> that reprepresents the Flash content.

	But the approach of (1) explicitly setting the width/height of the parent container #syntheticSnowFlashContainer
	to be exactly the width/height I want and (2) having .syntheticSnowFlash be at most the size of its parent container
	seems to work well.

	One caveat is that ruffle doesn't seem to allow the Flash content to scale UP past its native width/height,
	so we limit the max size of the surrounding container such that the Flash content is always nicely hugged by this container. 
*/

#syntheticSnowFlashContainer {
	/* Flash app on this page natively wants to be 550px by 400px */
	width: min(80%, 550px);
	aspect-ratio: 550 / 400;
	margin-inline: auto;	/* center horizontally */
}

.syntheticSnowFlash {
	max-width: 100%;
	max-height: 100%;
}
